#version 450

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0) uniform sampler2D inputTexture;
layout (binding = 3, rgba32f) uniform image2D outputImage;

void main() {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = textureSize(inputTexture, 0);

    if (pix.x <= 0 || pix.y <= 0 || pix.x >= size.x - 1 || pix.y >= size.y - 1)
        return;

    vec3 sum = vec3(0.0);
    vec3 sumSq = vec3(0.0);
    int count = 0;

    for (int dy = -1; dy <= 1; ++dy) {
        for (int dx = -1; dx <= 1; ++dx) {
            ivec2 neighbor = pix + ivec2(dx, dy);
            vec3 color = texelFetch(inputTexture, neighbor, 0).rgb;
            sum += color;
            sumSq += color * color;
            count++;
        }
    }

    vec3 mean = sum / float(count);
    vec3 variance = sumSq / float(count) - mean * mean;
    vec3 stddev = sqrt(max(variance, vec3(1e-6)));

    vec3 centerColor = texelFetch(inputTexture, pix, 0).rgb;
    vec3 clamped = clamp(centerColor, mean - stddev, mean + stddev);
    imageStore(outputImage, pix, vec4(clamped, 1.0));
}
